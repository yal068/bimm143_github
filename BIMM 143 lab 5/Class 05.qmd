---
title: "class 5: Data visualization with ggplot"
author: "Yang Liu (A16629623)"
format: pdf
toc: true
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics packages on the planet. 

There are many plotting systems in R. These include so called *"base"* plotting/graphics.

```{r}
plot(cars)
```

Base plot is generally rather short code and somewhat dull plots - but it is always there for you and is fast for big datasets.

If i want to use **ggplot2** it takes some more work

```{r}
 # ggplot(cars)
```

I need to install the package first. To do this I can use the function 'install.packages("ggplot2")'


Every time I want to use a package I need to load it up with a 'libarary()' call.

```{r}
library(ggplot2)
```

Now finally I can use ggplot

```{r}
ggplot(cars)
```

Every ggplot has at least 3 things:

- **data** (the data.frame witht the data you want to plot)
- **aes** (the asthetic mapping of the data to the plot)
- **geom** (how do you want the plot to look, points, lines, columns)

```{r}
head(cars)
```


```{r}
ggplot(cars) + 
  aes (x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```
I want a linear model and no standard error bounds shown on my plot. 

```{r}
bp <- ggplot(cars) + 
  aes (x=speed, y=dist) +
  geom_point()
```

```{r}
bp + geom_smooth(se=FALSE, method="lm") +
  labs(title = "Stopping Distnace of Old Cars",
       x="Speed(MPH)",
       y="Distance(ft)",
       caption="From the 'cars' dataset") +
  theme_bw()
```


## A more complicated scatter plot

Here we make a plot of gene expression data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

```{r}
nrow(genes)
colnames(genes)
ncol(genes)
```

```{r}
table(genes$State)
```


```{r}
genes$State == "up"
round( sum(genes$State == "up") / nrow(genes) * 100, 2)
```
Another way to calculate percentage of total genes is up-regulated in this dataset?

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")
up.present <- n.up/n.gene * 100
round (up.present, 2)
```

```{r}
bp <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()

bp
```


```{r}
bp + scale_colour_manual( values=c("black","gray","purple") ) +
  labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```

## Exploring their gapmider dataset

Here we will load up the gaomider dataset to get practive with different aes mappings. 

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

How many rows and columns can be found in this dataframe?

```{r}
row <- nrow(gapminder)
column <- ncol(gapminder)

row
column
```



```{r}
head(gapminder)
```

Q. How many countries are there in this data set?

```{r}
table(gapminder$year)

table(gapminder$continent)
```

I could use the 'unique()' function...

```{r}
unique(gapminder$continent)

length (unique(gapminder$continent))

length (unique(gapminder$country))
```

```{r}
library(ggplot2)
```


```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.2)
```
Q

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, col= continent, size=pop) +
  geom_point(alpha=0.5)
  
```

```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

head(gapminder_2007)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, col=continent,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
 
```


```{r}
ggplot(gapminder) + 
  aes(x = gdpPercap, y = lifeExp) +
  geom_point() +
  facet_wrap(~year) 
```
```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```



```{r}
sessionInfo()
```


